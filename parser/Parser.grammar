%package "main";
%class "Parser";
%import "node.*";
%import "type.*";
%import "environment.*";
%import "java.util.ArrayList";
%import "java.util.Iterator";

%embed {: 
	static class Events extends beaver.Parser.Events {
		public void syntaxError(Symbol token) {
			System.err.format("*** Erreur de syntaxe en ligne %d, colonne %d. Token inattendu: %s\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()),
				Terminals.NAMES[token.getId()]);
		}
	}
	
	public void semanticError(String msg, Symbol token) {
			System.err.format("*** " + msg + " ligne %d, colonne %d\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()));
		}
		
	private Environment typeEnvironment = new Environment("types");
	private Environment procedureEnvironment = new Environment("procedures");
	private StackEnvironment stackEnvironment = new StackEnvironment("local variables stack");
	private String type_declaration_name;
	
:};

%init {: 
	report = new Events();
:};

%terminals TYPE,STRING,INTEGER,BOOLEAN,ARRAY, OF, STRUCT;
%terminals VAR, PROCEDURE, FUNCTION, BEGIN, END, NEW, DISPOSE;
%terminals PRINTLN, READLN, RETURN, IF, THEN ,ELSE, WHILE, DO;
%terminals SWITCH, CASE, DEFAULT;

%terminals SEMI, DOT, COLON, COMMA;
%terminals LPAR, RPAR, LBRA, RBRA, LBRACE, RBRACE;

%terminals EQUALS,CIRC;
%terminals  PLUS, MINUS, TIMES, DIVIDE;
%terminals AND, OR, DIFFERENT,LOGIC_EQ;
%terminals LESS, MORE, LESS_EQ, MORE_EQ,NOT;

%terminals IDENTIFIER, TRUE, FALSE, NULL, LIT_INTEGER, LIT_STRING;

%right UNARY_MINUS,CIRC,NOT,IF,THEN;
%left TIMES, DIVIDE;
%left PLUS, MINUS;
%left LESS, MORE, LESS_EQ, MORE_EQ,AND,OR,DIFFERENT,LOGIC_EQ;

%typeof IDENTIFIER, LIT_STRING, STRING, BOOLEAN, INTEGER = "String";
%typeof LIT_INTEGER = "Integer";
%typeof expression, variable_access, procedure_expression = "NodeExp";
%typeof expression_part, expresion_list, variable_declaration_list, procedure_definition_list, argt_list, statement_list, case_statement_list, case_statement = "NodeList";
%typeof variable_declaration, procedure_definition, argt, statement = "Node";
%typeof type_declaration, type, range_type, pointer_type, structure_type, feature_type = "Type";
%typeof type_declaration_head = "TypeString";
%typeof type_declaration_list, feature_list_type = "TypeList";
%typeof identifier_list = "IdentifierList";

/***
* A completer
***/
%goal program;

/***
* Semantique A completer
*
* Quelques astuces:
*
* a) ne mettez jamais de lettres accentuees, Beaver ne fonctionnerait pas
*
* b) quand vous souhaitez mettre du code avant la fin de la regle, 
*     X= A {: je voudrais mettre du code ici :} B {: pour l'exploiter ici :}
* utilisez une rege vide comme ceci:
*
*     X= A empty_X B {: pour l'exploiter ici  :} ;
*     empty_X= {: je voudrais mettre du code ici :};
*
* c) pour implementer une liste, faites comme ceci:
* xxx_list=
*	xxx_list.list xxx.elt {: list.add(elt); return list; :}
*	| xxx.elt {: MyList list = new MyList(); list.add(elt); return list; :}
*	;
*	
***/

program = type_declaration_part 
		variable_declaration_part 
		procedure_definition_part 
		BEGIN 
		statement_list.l 
		END 
		{: System.out.println(typeEnvironment.toString()+"\n");return l; :}
		;

type_declaration_part =   								{: return new TypeList(new TypeVoid()) ; :}
					| TYPE type_declaration_list.list   {: return list ; :}
					  ;

type_declaration_list = type_declaration_list.list type_declaration.e	{: list.add(e); return list; :}
					  | type_declaration.e 								{: return new TypeList(e); :}
					  ;

type_declaration = type_declaration_head.e EQUALS type.f SEMI	{: return new TypeFeature(e.getConst_value(),f); :}
				;

type_declaration_head = IDENTIFIER.e	{: return new TypeString(e); :}
						;

type = simple_type.e 	{: return e; :}
	 | named_type.e 	{: return e; :}
	 | index_type.e 	{: return e; :}
	 | array_type.e		{: return e; :}
	 | pointer_type.e	{: return e; :}
	 | structure_type.e	{: return e; :}
	 ;

simple_type = STRING 		{: return new TypeString(); :}
			| INTEGER 		{: return new TypeInt(); :}
			| BOOLEAN		{: return new TypeBoolean(); :}
			;
			
named_type = IDENTIFIER.e {: return new TypeNamed(e); :} 
			;

index_type = enumerated_type.e 	{: return e; :}
		   | subrange_type.e 	{: return e; :}
		   ;

enumerated_type = LPAR identifier_list.e RPAR {: return e ; :}
				;

subrange_type = LIT_INTEGER.e DOT LIT_INTEGER.f 	{: return new TypeArrayRange(new TypeInt(e),new TypeInt(f)); :}
			  | IDENTIFIER.e DOT IDENTIFIER.f		{: return new TypeArrayRange(new TypeString(e),new TypeString(f)); :}
			  ;

array_type = ARRAY LBRA range_type.e RBRA OF type.f	{: return new TypeArray(e,f); :}	
			;

range_type = enumerated_type.e  {: return e ; :}
		   | subrange_type.e  	{: return e ; :}
		   | named_type.e  		{: return e ; :}
		   ;

pointer_type = 	CIRC type.e 	{: return new TypePointer(e) ; :}
			;

structure_type = STRUCT LBRACE feature_list_type.t RBRACE {: return new TypeStruct(t) ; :}
				;

feature_list_type = feature_list_type.list feature_type.e {:  list.add(e) ; return list;:}
				  | feature_type.e 						  {: return new TypeFeatureList(e); :}
				  ;

feature_type = IDENTIFIER.str COLON type.t SEMI		{: return new TypeFeature(str,t); :}
			;
					
variable_declaration_part =  										{: return new NodeList(); :}
							| VAR variable_declaration_list.list 	{: return list; :}
						  ;

variable_declaration_list = variable_declaration_list.list variable_declaration.e   {:  list.add(e) ; return list;:}
						  | variable_declaration.e 									{: return new NodeList(e);  :}
						  ;

variable_declaration = identifier_list.list COLON type.e SEMI {: 
	NodeList nl = new NodeList();
	for (String id : list) {
		nl.add(new NodeId(id, e));
		typeEnvironment.putVariable(id,e); 
	}
	return nl;	
 :} ;

identifier_list = identifier_list.list COMMA IDENTIFIER.e 	{: list.add(e) ; return list; :}
				| IDENTIFIER.e 								{: return new IdentifierList(e); :}
				;

procedure_definition_part = 									{: return new NodeList(); :}
							| procedure_definition_list.list 	{: return list; :}
							;

procedure_definition_list = procedure_definition_list.list procedure_definition.e 	 {: list.add(e); return list; :}
						  | procedure_definition.e									 {: return new NodeList(e); :}
						  ;

procedure_definition = procedure_definition_head block
					 | procedure_definition_head SEMI
					 ;

procedure_definition_head = PROCEDURE IDENTIFIER LPAR argt_part RPAR
						  | FUNCTION IDENTIFIER LPAR argt_part RPAR COLON type 
						  ;

argt_part = 						{: return new NodeList(); :}
		 | argt_list.list 			{: return list; :}
		 ;

argt_list = argt_list.list COMMA argt.e 		{: list.add(e) ; return list;:}
		  | argt.e 								{: return new NodeList(e); :}
		  ;

argt = IDENTIFIER.i COLON type.e {: return new NodeId(i, e); :};

block = variable_declaration_part BEGIN statement_list END 
		;

statement_list = statement_list.list statement.e 	{: list.add(e); return list; :}
			   | statement.e 						{: return new NodeList(e); :} 
			   ;

statement = simple_statement.e		{: return e; :}
		  | structured_statement.e  {: return e; :}
		  ;

simple_statement = assignment_statement.e 	{: return e; :}
				 | procedure_statement.e 	{: return e; :}
				 | new_statement.e 			{: return e; :}
				 | dispose_statement.e 		{: return e; :}
				 | println_statement.e		{: return e; :}
				 | readln_statement.e 		{: return e; :}
				 | return_statement.e 		{: return e; :}
				 ;

assignment_statement = variable_access.e EQUALS expression.f SEMI 		{: System.out.println(e.getType()); return new NodeAssign(e,f); :}
					;

procedure_statement = procedure_expression.e SEMI  {: return e ; :}
					;
procedure_expression = IDENTIFIER.e LPAR expression_part.list RPAR {: return new NodeCallFct(e, new TypeFunct(e, new TypeTuple(), new TypeVoid()), list); :}
					;

expression_part =  					  {: return new NodeList() ; :}
				| expresion_list.list {: return list; :}
				;

expresion_list = expresion_list.list COMMA expression.e {: list.add(e); return list ; :}
			   | expression.e 							{: return new NodeList(e); :}
			   ;

new_statement = NEW variable_access.v SEMI 			{: return new NodeNew(v); :}
				;

dispose_statement = DISPOSE variable_access.v SEMI 	{: return new NodeDispose(v); :}
				;

println_statement = PRINTLN expression.e SEMI 		{: return new NodeCallFct("println", 
					new TypeFunct("println", new TypeTuple(e.getType()), new TypeVoid()), new NodeList()); :}
				;

readln_statement = READLN expression.e SEMI		{: return new NodeCallFct("readln", 
					new TypeFunct("readln", new TypeTuple(e.getType()), new TypeVoid()), new NodeList()); :}	
				;

return_statement = RETURN expression.e SEMI 		{: return new NodeReturn(e); :}
				;

structured_statement = block.e 				{: return e; :}
					 | if_statement.e 		{: return e; :}
					 | while_statement.e 	{: return e; :}
					 | switch_statement.e 	{: return e; :}
					 ;

if_statement = IF expression.e THEN statement.s						{: return new NodeIf(e,s); :}
			 | IF expression.e THEN statement.s1 ELSE statement.s2	{: return new NodeIf(e,s1,s2); :}
			 ;

while_statement = WHILE expression.e DO statement.s		{: return new NodeWhile(e,s); :}
				;

switch_statement = SWITCH expression.e BEGIN case_statement_list.s END		{: return new NodeSwitch(e,s); :}
				;

case_statement_list = case_statement_list.list case_statement.s	{: list.add(s); return list; :}
					| case_statement.s							{: NodeCaseList list = new NodeCaseList(); list.add(s); return list; :}
					;

case_statement = CASE IDENTIFIER.str COLON statement.s		{: return new NodeCase(str,s); :}
				| DEFAULT COLON statement.s					{: return new NodeCase(s); :}
				;


variable_access = IDENTIFIER.str								{: return new NodeId(str,new TypeList(new TypeString(str))); :}
				| variable_access.v LBRA expression.e RBRA		{: return new NodeArrayAccess(v,e); :}
				|  expression.e CIRC							{: return new NodePtrAccess(e); :}
				;

expression = expression.e PLUS expression.f			{: return new NodeOp("+",e,f); :}
		   | expression.e MINUS expression.f		{: return new NodeOp("-",e,f); :}
		   | MINUS expression.e @UNARY_MINUS		{: return new NodeOp("-",e); :}
		   | expression.e TIMES expression.f		{: return new NodeOp("*",e,f); :}
		   | expression.e DIVIDE expression.f		{: return new NodeOp("/",e,f); :}
		   | expression.e OR expression.f			{: return new NodeOp("||",e,f); :}
		   | expression.e AND expression.f			{: return new NodeOp("&&",e,f); :}
		   | NOT expression.e						{: return new NodeOp("!",e); :}
		   | expression.e LESS expression.f			{: return new NodeOp("<",e,f); :}
		   | expression.e LESS_EQ expression.f		{: return new NodeOp("<=",e,f); :}
		   | expression.e MORE expression.f			{: return new NodeOp(">",e,f); :}
		   | expression.e MORE_EQ expression.f		{: return new NodeOp(">=",e,f); :}
		   | expression.e LOGIC_EQ expression.f		{: return new NodeOp("==",e,f); :}
		   | expression.e DIFFERENT expression.f	{: return new NodeOp("!=",e,f); :}
		   | LPAR expression.e RPAR					{: return e; :}
		   | procedure_expression.e					{: return e; :}
		   | variable_access.v						{: return v; :}
		   | literal.l 								{: return l; :}
		   ;

literal = LIT_INTEGER.e 	{: return new NodeLiteral(new TypeInt(e), e); :}
		| LIT_STRING.e 		{: return new NodeLiteral(new TypeString(e), e); :}
		| TRUE 				{: return new NodeLiteral(new TypeBoolean(true), true); :}
		| FALSE 			{: return new NodeLiteral(new TypeBoolean(false), false); :}
		| NULL 				{: return new NodeLiteral(new TypePointer(null), null); :}
		;
