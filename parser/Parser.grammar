%package "main";
%class "Parser";
%import "node.*";
%import "type.*";
%import "environment.*";
%import "java.util.ArrayList";
%import "java.util.Iterator";

%embed {: 
	static class Events extends beaver.Parser.Events {
		public void syntaxError(Symbol token) {
			System.err.format("*** Erreur de syntaxe en ligne %d, colonne %d. Token inattendu: %s\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()),
				Terminals.NAMES[token.getId()]);
		}
	}
	
	public void semanticError(String msg, Symbol token) {
			System.err.format("*** " + msg + " ligne %d, colonne %d\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()));
		}
		
	private Environment typeEnvironment = new Environment("types");
	private Environment procedureEnvironment = new Environment("procedures");
	private StackEnvironment stackEnvironment = new StackEnvironment("local variables stack");
	private String type_declaration_name;
	
:};

%init {: 
	report = new Events();
:};

%terminals TYPE,STRING,INTEGER,BOOLEAN,ARRAY, OF, STRUCT;
%terminals VAR, PROCEDURE, FUNCTION, BEGIN, END, NEW, DISPOSE;
%terminals PRINTLN, READLN, RETURN, IF, THEN ,ELSE, WHILE, DO;
%terminals SWITCH, CASE, DEFAULT;

%terminals SEMI, DOT, COLON, COMMA;
%terminals LPAR, RPAR, LBRA, RBRA, LBRACE, RBRACE;

%terminals EQUALS,CIRC;
%terminals  PLUS, MINUS, TIMES, DIVIDE;
%terminals AND, OR, DIFFERENT,LOGIC_EQ;
%terminals LESS, MORE, LESS_EQ, MORE_EQ,NOT;

%terminals IDENTIFIER, TRUE, FALSE, NULL, LIT_INTEGER, LIT_STRING;

%right UNARY_MINUS,CIRC,NOT,IF,THEN;
%left TIMES, DIVIDE;
%left PLUS, MINUS;
%left LESS, MORE, LESS_EQ, MORE_EQ,AND,OR,DIFFERENT,LOGIC_EQ;

%typeof expression = "NodeExp";
%typeof variable_access = "Node";
%typeof LIT_INTEGER = "Integer";
%typeof LIT_STRING = "String";
%typeof literal = "Node";

/***
* A completer
***/
%goal program;

/***
* Semantique A completer
*
* Quelques astuces:
*
* a) ne mettez jamais de lettres accentuees, Beaver ne fonctionnerait pas
*
* b) quand vous souhaitez mettre du code avant la fin de la regle, 
*     X= A {: je voudrais mettre du code ici :} B {: pour l'exploiter ici :}
* utilisez une rege vide comme ceci:
*
*     X= A empty_X B {: pour l'exploiter ici  :} ;
*     empty_X= {: je voudrais mettre du code ici :};
*
* c) pour implementer une liste, faites comme ceci:
* xxx_list=
*	xxx_list.list xxx.elt {: list.add(elt); return list; :}
*	| xxx.elt {: MyList list = new MyList(); list.add(elt); return list; :}
*	;
*	
*
***/

program = type_declaration_part 
		variable_declaration_part 
		procedure_definition_part 
		BEGIN 
		statement_list.l 
		END 
		{: return l; :}
		;

type_declaration_part = 
					| TYPE type_declaration_list
					  ;

type_declaration_list = type_declaration_list type_declaration
					  | type_declaration
					  ;

type_declaration = type_declaration_head EQUALS type SEMI
				;

type_declaration_head = IDENTIFIER
						;

type = simple_type
	 | named_type
	 | index_type
	 | array_type
	 | pointer_type
	 | structure_type
	 ;

simple_type = STRING
			| INTEGER
			| BOOLEAN	
			;

named_type = IDENTIFIER 
			;

index_type = enumerated_type
		   | subrange_type
		   ;

enumerated_type = LPAR identifier_list RPAR 
				;

subrange_type = LIT_INTEGER DOT LIT_INTEGER
			  | IDENTIFIER DOT IDENTIFIER
			  ;

array_type = ARRAY LBRA range_type RBRA OF type	
			;

range_type = enumerated_type
		   | subrange_type
		   | named_type
		   ;

pointer_type = 	CIRC type		
			;

structure_type = STRUCT LBRACE feature_list_type RBRACE
				;

feature_list_type = feature_list_type feature_type
				  | feature_type
				  ;

feature_type = IDENTIFIER COLON type SEMI
			;
					
variable_declaration_part = 
							| VAR variable_declaration_list
						  ;

variable_declaration_list = variable_declaration_list variable_declaration
						  | variable_declaration
						  ;

variable_declaration = identifier_list COLON type SEMI ;

identifier_list = identifier_list COMMA IDENTIFIER
				| IDENTIFIER
				;

procedure_definition_part = 
							| procedure_definition_list
							;

procedure_definition_list = procedure_definition_list procedure_definition
						  | procedure_definition
						  ;

procedure_definition = procedure_definition_head block
					 | procedure_definition_head SEMI
					 ;

procedure_definition_head = PROCEDURE IDENTIFIER LPAR argt_part RPAR
						  | FUNCTION IDENTIFIER LPAR argt_part RPAR COLON type 
						  ;

argt_part = 
		 | argt_list
		 ;

argt_list = argt_list COMMA argt
		  | argt
		  ;

argt = IDENTIFIER COLON type;

block = variable_declaration_part BEGIN statement_list END
		;

statement_list = statement_list statement
			   | statement
			   ;

statement = simple_statement
		  | structured_statement
		  ;

simple_statement = assignment_statement
				 | procedure_statement
				 | new_statement
				 | dispose_statement
				 | println_statement
				 | readln_statement
				 | return_statement
				 ;

assignment_statement = variable_access.e EQUALS expression.f SEMI 		{: return new NodeAssign(e,f); :}
					;

procedure_statement = procedure_expression SEMI 
					;

procedure_expression = IDENTIFIER LPAR expression_part RPAR 
					;

expression_part = 
				| expresion_list
				;

expresion_list = expresion_list COMMA expression
			   | expression
			   ;

new_statement = NEW variable_access.v SEMI 			{: return new NodeNew(v); :}
				;

dispose_statement = DISPOSE variable_access.v SEMI 	{: return new NodeDispose(v); :}
				;

println_statement = PRINTLN expression SEMI 
				;

readln_statement = READLN expression SEMI
				;

return_statement = RETURN expression.e SEMI 		{: return new NodeReturn(e); :}
				;

structured_statement = block
					 | if_statement
					 | while_statement
					 | switch_statement
					 ;

if_statement = IF expression.e THEN statement.s						{: return new NodeIf(e,s); :}
			 | IF expression.e THEN statement.s1 ELSE statement.s2	{: return new NodeIf(e,s1,s2); :}
			 ;

while_statement = WHILE expression.e DO statement.s		{: return new NodeWhile(e,s); :}
				;

switch_statement = SWITCH expression.e BEGIN case_statement_list.s END		{: return new NodeSwitch(e,s); :}
				;

case_statement_list = case_statement_list.list case_statement.s	{: list.add(s); return list; :}
					| case_statement.s							{: NodeCaseList list = new NodeCaseList(); list.add(s); return list; :}
					;

case_statement = CASE IDENTIFIER.str COLON statement.s		{: return new NodeCase(str,s); :}
				| DEFAULT COLON statement.s					{: return new NodeCase(s); :}
				;


variable_access = IDENTIFIER									{: :}
				| variable_access.v LBRA expression.e RBRA		{: return new NodeArrayAccess(v,e); :}
				|  expression.e CIRC							{: return new NodePtrAccess(e); :}
				;

expression = expression.e PLUS expression.f			{: return new NodeOp("+",e,f); :}
		   | expression.e MINUS expression.f		{: return new NodeOp("-",e,f); :}
		   | MINUS expression.e @UNARY_MINUS		{: return new NodeOp("-",e); :}
		   | expression.e TIMES expression.f		{: return new NodeOp("*",e,f); :}
		   | expression.e DIVIDE expression.f		{: return new NodeOp("/",e,f); :}
		   | expression.e OR expression.f			{: return new NodeOp("||",e,f); :}
		   | expression.e AND expression.f			{: return new NodeOp("&&",e,f); :}
		   | NOT expression.e						{: return new NodeOp("!",e); :}
		   | expression.e LESS expression.f			{: return new NodeOp("<",e,f); :}
		   | expression.e LESS_EQ expression.f		{: return new NodeOp("<=",e,f); :}
		   | expression.e MORE expression.f			{: return new NodeOp(">",e,f); :}
		   | expression.e MORE_EQ expression.f		{: return new NodeOp(">=",e,f); :}
		   | expression.e LOGIC_EQ expression.f		{: return new NodeOp("==",e,f); :}
		   | expression.e DIFFERENT expression.f	{: return new NodeOp("!=",e,f); :}
		   | LPAR expression.e RPAR					{: return e; :}
		   | procedure_expression.e					{: return e; :}
		   | variable_access.v						{: // pareil que literal :}
		   | literal.l 								{: //j'pense faut ajouter dans un node ou dans une hashmap :}
		   ;

literal = LIT_INTEGER.e 	{: return new NodeLiteral(new TypeInt(e), e); :}
		| LIT_STRING.e 		{: return new NodeLiteral(new TypeString(e), e); :}
		| TRUE 				{: return new NodeLiteral(new TypeBoolean(true), true); :}
		| FALSE 			{: return new NodeLiteral(new TypeBoolean(false), false); :}
		| NULL 				{: return new NodeLiteral(new TypePointer(null), null); :}
		;
